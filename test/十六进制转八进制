import java.util.Scanner;

public class test {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		String[] strs = new String[n];
		for( int i = 0 ; i < n ; i ++){
			strs[i] = scan.next();
		}
		scan.close();
		for( int i = 0  ; i < n ; i ++){
			String bs = toBinary(strs[i]);
			int len_bin = bs.length();
			if( len_bin % 3 == 1){
				bs = "00" + bs;
			}else if( len_bin % 3 == 2){
				bs = "0" + bs;
			}
			//System.out.println(bs);
			System.out.println(toOct(bs));
		}
		
	}
	
	public static String toOct( String string){
			int len = string.length();
			int index = 0;
			if( string.substring(0, 3).equals("000")){
				index = 3;
			}
			StringBuffer oct = new StringBuffer();
			for( int i = index ; i < len - 2 ; i = i + 3){
				String sub = string.substring(i, i + 3);
				if(sub.equals("000")) oct.append("0");  
	            else if(sub.equals("001")) oct.append("1");  
	            else if(sub.equals("010")) oct.append("2");  
	            else if(sub.equals("011")) oct.append("3");  
	            else if(sub.equals("100")) oct.append("4");  
	            else if(sub.equals("101")) oct.append("5");  
	            else if(sub.equals("110")) oct.append("6");  
	            else if(sub.equals("111")) oct.append("7");  
				
				}
			return oct.toString();
			}
			
	
	
	public static String toBinary(String str){//16è½¬2
		int len = str.length();
		StringBuffer stb = new StringBuffer();
		for( int i = 0 ; i < len ; i ++){
			switch( str.charAt(i)) {
			case '0' : stb.append("0000"); break;
			case '1' : stb.append("0001"); break;
			case '2' : stb.append("0010"); break;
			case '3' : stb.append("0011"); break;
			case '4' : stb.append("0100"); break;
			case '5' : stb.append("0101"); break;
			case '6' : stb.append("0110"); break;
			case '7' : stb.append("0111"); break;
			case '8' : stb.append("1000"); break;
			case '9' : stb.append("1001"); break;
			case 'A' : stb.append("1010"); break;
			case 'B' : stb.append("1011"); break;
			case 'C' : stb.append("1100"); break;
			case 'D' : stb.append("1101"); break;
			case 'E' : stb.append("1110"); break;
			case 'F' : stb.append("1111"); break;
			default : break;
			}
		}
		return stb.toString();
	}
}
